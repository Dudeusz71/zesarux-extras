###############################################################
# COPPER USER CONFIGURATION
# rebuild the library if changes are made
#

# The ZXN Copper is an independent device operating in parallel
# with the cpu whose timing is tied to the video display generation.
# Nominally it operates at 7Mhz with each copper instruction
# taking the same amount of time as the movement of the raster by
# one horizontal pixel.
#
# Vertically the display consists of 262 lines in 60Hz mode and
# 312 lines in 50Hz mode.  Lines 0-191 always correspond to the
# area containing the active display.
#
# 50Hz                          60Hz
# Lines                         Lines
#
#   0-191  Display                0-191  Display
# 192-247  Bottom Border        192-223  Bottom Border
# 248-255  Vsync (interrupt)    224-231  Vsync (interrupt)
# 256-311  Top Border           232-261  Top Border
#
# Horizontally the display is the same in 50Hz or 60Hz mode but it
# varies by model.  It consists of 448 pixels (0-447) in 48k mode
# and 456 pixels (0-455) in 128k mode.  Grouped in eight pixels
# that's screen bytes 0-55 in 48k mode and 0-56 in 128k mode.
#
# 48k mode                      128k mode
# Bytes  Pixels                 Bytes  Pixels
#
#  0-31    0-255  Display        0-31    0-255  Display
# 32-39  256-319  Right Border  32-39  256-319  Right Border
# 40-51  320-415  HBlank        40-51  320-415  HBlank
# 52-55  416-447  Left Border   52-56  416-455  Left Border
#
# The ZXN Copper understands two operations:
#
# (1) Wait for a particular line (0-311 @ 50Hz or 0-261 @ 60Hz)
#     and a horizontal character position (0-55 or 0-56)
#
# (2) Write a value to a nextreg.
#
# These operations are encoded into a 16-bit instruction which
# is stored in big endian form.  The Copper has a 2k code space
# on the fpga, which means an instruction space of 1024 instructions.
#
# z88dk/z80asm adds the following instructions to assemble copper code:
#
# cu.wait line,hor   ; wait for LINE line and HORIZONTAL hor
# cu.move reg,val    ; move val to nextreg reg
# cu.nop             ; wait one horizontal pixel (cu.move 0,0)
# cu.stop            ; stop the copper (impossible wait) 
#
# The instruction format can be found at:
# https://docs.google.com/document/d/1nhBNre5ePgelGfcB0KRmut1D3lUlk8R1IFj4MAmAiK0/edit
#
# Programming the Copper involves writing zeroes to nextreg 97 & 98
# to turn off the Copper and set the current instruction index to zero.
# Then the program is loaded into the Copper by writing bytes to
# nextreg 96.  Once that's done, the Copper can be switched on in
# one of three modes as indicated for nextreg 98 below.

# NEXTREG 96: Copper Data
#
# define(`__REG_COPPER_DATA', 96)

# NEXTREG 97: Copper Control Lo
#
# define(`__REG_COPPER_CONTROL_L', 97)

# NEXTREG 98: Copper Control Hi
#
# define(`__REG_COPPER_CONTROL_H', 98)
# define(`__RCCH_COPPER_STOP', 0x00)
# define(`__RCCH_COPPER_RUN_LOOP_RESET', 0x40)
# define(`__RCCH_COPPER_RUN_LOOP', 0x80)
# define(`__RCCH_COPPER_RUN_VBI', 0xc0)

# STOP causes the copper to stop executing instructions
# and hold the instruction pointer at its current position.
#
# RUN_LOOP_RESET causes the copper to reset its instruction
# pointer to 0 and run in LOOP mode (see next).
#
# RUN_LOOP causes the copper to restart with the instruction
# pointer at its current position.  Once the end of the instruction
# list is reached, the copper loops back to the beginning.
#
# RUN_VBI causes the copper to reset its instruction
# pointer to 0 and run in VBI mode.  On vsync interrupt,
# the copper restarts the instruction list from the beginning.

# Note that modes RUN_LOOP_RESET and RUN_VBI will only reset
# the instruction pointer to zero if the mode actually changes
# to RUN_LOOP_RESET or RUN_VBI.  Writing the same mode in a
# second write will not cause the instruction pointer to zero.

# It is possible to write values into the copper's instruction
# space while it is running and since the copper constantly
# refetches a wait instruction it is executing, you can cause
# the wait instruction to end prematurely by changing it to
# something else.

#
# END OF USER CONFIGURATION
###############################################################




Copper opcodes:
https://docs.google.com/document/d/1nhBNre5ePgelGfcB0KRmut1D3lUlk8R1IFj4MAmAiK0/edit#

ZX Spectrum Next Hardware
(v1.1 - 12/10/2017)


This document will detail proposed additions to the ZX Spectrum Next machine in order to help operational needs, and graphical ones.


Copper
This module is dedicated to writing Next Registers at specific points on the display. Just like the Amiga copper list it consists of only 2 commands. WAIT and MOVE. This simple control allows updating of registers as the display renders.




ZX Spectrum Next Copper
The copper (as used in the Amiga) is a simple beast, with only 3 commands; WAIT, MOVE and SKIP. We won’t be using the SKIP as we’ve compressed the copper into 16 bits rather than 32.
WAIT will pause processing until a certain point on the display (to a fixed resolution). This lets developers update things like scroll registers, colours, display locations and all from a simple command list, without having to do Raster IRQs and then trying to get timing right for nice clean splits. Only the lower 128 registers can be written to. (currently not an issue)

The copper is (currently) a maximum of 1K in size (512 instructions).
Writing to a READ ONLY register (like register 0) will act as a “NOP”, and this means you can wait for a low res horizontal dot value, then output NOPs to get to a more precise location. This reduces the impact of the lowres horizontal dot clock.


WAIT
Wait for a specific point on screen
16 bit


Specify WAIT instruction
15 = 1


Horizontal position (0-55, every 8 pixels)
9-14  (6 bits)


Raster line to wait for (0-311)
0-8 (9 bits)
MOVE
Move a value into a NextReg
16 bit


Specify MOVE instruction
15 = 0


Next register (register 0-127)
8-14


Byte value to write
0-7

Details on the Amiga copper can be found here…
http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node0047.html

Register
NextReg
Copper Data (8 bits wide, must be 2 bytes at a time)
BIG Endian format!
$60
Copper Control (16 bits)

Bits 15-14 (2 bits)
%00 = STOP
%01 = START then stop at end of stream and don’t loop
%10 = Free running will run and loop continuously
%11 = START and automatically restart at next VBlank


Bits 13-10 (4 bits)
MUST be %00000

Bits 9-0  (10 bits)
Instruction Index (0 to 1023)
$61 LO
$62 HI
Screen layout
The screen looks like this, with 312 scanlines. So the horizontal dot clock being from 0 to 55 (0 to 440). However users should be aware that 0,0 (raster,HPOS) is not the top left border!

xxxxxxx
Shown here is the actual raster and HPOS offsets. As you can see 0,0 (raster,hpos) is actually the first pixel of the screen, so care should be taken to wait until the last line so you can set up the next frame correctly if required.


Simple Examples

Auto swap turbo mode
Commands
Values


WAIT 193,0
$80c1
Wait for just into top/bottom border
(untested line number)
MOVE 7,2
$0702
Set CPU into 14Mhz mode
WAIT 311,0
$8137
Wait for line before start of screen
MOVE 7,1
$0701
Set CPU into 7Mhz mode
MOVE 0,0
$0000
Fill rest of list NOP to auto restart….
( when using mode %10 )


Split screen scrolling
Commands
Values


WAIT 310,0
$8136
Wait for before start of screen
MOVE 22,??
$16??
Set Layer 2 X scroll
MOVE 23,??
$17??
Set Layer 2 Y scroll
WAIT 96,0
$8060
Wait for middle of the pixel screen
MOVE 22,0
$1600
Reset Layer 2 X scroll
MOVE 23,0
$1700
Reset Layer 2 Y scroll
MOVE 0,0
$0000
Fill rest of list NOP to auto restart….
( when using mode %10 )


This system can also obviously be used for colour changes to get sky effects, layer priorities, enabling/disabling screen modes etc.



